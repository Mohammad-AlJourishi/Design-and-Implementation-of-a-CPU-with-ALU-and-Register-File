    module cpu(Reg0,Reg1,Reg2,Reg3,Reg4,Reg5,Reg6,Reg7,op,op1_sel,op2_sel,op1,op2,clk,result,status,address,write_data,read_data);
    input [15:0]Reg0,Reg1,Reg2,Reg3,Reg4,Reg5,Reg6,Reg7;
    input [3:0]op;
    input clk;
    input [2:0]op1_sel,op2_sel;
    inout [15:0]op1,op2;
    output [15:0] result;
    output [2:0] status;
    input [15:0]write_data;
    output [9:0]address;
    output [15:0]read_data;
    reg_file F1(Reg0,Reg1,Reg2,Reg3,Reg4,Reg5,Reg6,Reg7,op1_sel,op2_sel,op1,op2);
    alu A1(op,op1,op2,clk,result,status,write_data,address,read_data);
    RAM mem(address,read_data,write_data,clk);
    endmodule
    
    module RAM (address,read_data,write_data,clk);
      input wire clk;                 // Clock input
      input wire [9:0] address;        // Memory address
      input wire [15:0] write_data;       // Input data to be written to memory
      output reg [15:0] read_data;       // Output data read from memory
      reg [15:0] memory [0:1023];      // 1024 x 16 memory array
    
      always @(negedge clk) begin
        // Read operation
        if (address >= 0 && address <= 1023)
          read_data <= memory[address];
    
        // Write operation
        if (address >= 0 && address <= 1023)
          memory[address] <= write_data;
      end
    
    endmodule
    
    module reg_file(Reg0,Reg1,Reg2,Reg3,Reg4,Reg5,Reg6,Reg7,op1_sel,op2_sel,op1,op2);
    input [15:0]Reg0,Reg1,Reg2,Reg3,Reg4,Reg5,Reg6,Reg7;
    input [2:0]op1_sel,op2_sel;
    output reg [15:0]op1,op2;
    always@(op1_sel or op2_sel)
    begin
         case(op1_sel)
            3'b000:op1<=Reg0;
            3'b001:op1<=Reg1;
            3'b010:op1<=Reg2;
            3'b011:op1<=Reg3;
            3'b100:op1<=Reg4;
            3'b101:op1<=Reg5;
            3'b110:op1<=Reg6;
            3'b111:op1<=Reg7;
        endcase
        case(op2_sel)
            3'b000:op2<=Reg0;
            3'b001:op2<=Reg1;
            3'b010:op2<=Reg2;
            3'b011:op2<=Reg3;
            3'b100:op2<=Reg4;
            3'b101:op2<=Reg5;
            3'b110:op2<=Reg6;
            3'b111:op2<=Reg7;
        endcase
    end
    endmodule
    
    
    
    
    module alu(op,op1,op2,clk,result,status,write_data,address,read_data);
    input [15:0]op1,op2;
    input [3:0]op;
    input clk;
    output reg [15:0] result;
    output reg [2:0] status;
    input [15:0] write_data;
    output wire [9:0] address;
    output [15:0] read_data;
    wire [15:0]w1,w2,w3,w4,w5,w8,w9,w10,w11,w12,w13,w14;
    
    wire cin = 0;
    wire v,c;
    Increment_Op1 increment_op1(op1, w1,cin,c,v);
    Decrement_Op1 decrement_op1(op1, w2,cin,c,v);
    Subtraction subtraction(op1, op2, w3, cin,c, v);
    Addition addition(op1, op2, w4, cin,c, v);
    Set_on_Less_Than set_on_less_than(op1, op2, w5, cin);
    Store store(op1, op2, address, write_data, clk);
    Load load(op1, op2, address, clk, read_data,cin);
    Logical_AND logical_and(op1, op2, w8,cin);
    Logical_OR logical_or(op1, op2, w9, cin);
    AND_Bitwise and_bitwise(op1, op2, w10,cin);
    OR_Bitwise or_bitwise(op1, op2, w11,cin);
    XNOR_Bitwise xnor_bitwise(op1, op2, w12);
    Circular_Shift_Right r(op1, w13);
    Shift_Left l(op1,w14);
    always@(*)
    begin
        case(op)
          4'b0000: result <= w1;
          4'b0001: result <= w2;
          4'b0010: result <= w3;
          4'b0011: result <= w4;
          4'b0100: result <= w5;
          4'b0101: result <= {12'b0, address};


          4'b0110: result <= op1;
          4'b0111: result <= w8;
          4'b1000: result <= w9;
          4'b1001: result <= w10;
          4'b1010: result <= w11;
          4'b1011: result <= w12;
          4'b1100: result <= w13;
          4'b1101: result <= w14;
          default: result <= 0;
        endcase
        if(c != 0)       status[2] = 1; else  status[2] = 0;
        if(v != 0)       status[0] = 1; else  status[0] = 0;
        if(result == 0)  status[1] = 1; else  status[1] = 0;
    end
    endmodule
    
    module Increment_Op1(op1,result,Z,C,V);
      input [15:0] op1;
      output [15:0] result;
      output wire Z, C, V;
      wire [15:0] op1_plus_1;
      
      assign op1_plus_1 = op1 + 1;
      assign result = op1_plus_1;
      assign Z = (result == 0);
      assign C = 0;
      assign V = 0;
    endmodule
    
    
    
    
    module Decrement_Op1(op1,result,Z,C,V);
      input [15:0] op1;
      output [15:0] result;
      output wire Z, C, V;
      wire [15:0] op1_minus_1;
      
      assign op1_minus_1 = op1 - 1;
      assign result = op1_minus_1;
      assign Z = (result == 0);
      assign C = 0;
      assign V = 0;
    endmodule
    
    module Subtraction(op1,op2,result,Z,C,V);
      input [15:0] op1;
      input [15:0] op2;
      output [15:0] result;
      output wire Z, C, V;
      
      wire [15:0] diff;
    
      assign diff = op1 - op2;
      assign result = diff;
    
      assign Z = (result == 0);
      assign C = (op1 < op2);
      assign V = 0;
    endmodule
    
    
    
    
    
    module Addition(op1,op2,result,Z,C,V);
      input [15:0] op1;
      input [15:0] op2;
      output [15:0] result;
      output wire Z, C, V;
      
      wire [15:0] sum;
    
      assign sum = op1 + op2;
      assign result = sum;
    
      assign Z = (result == 0);
      assign C = (sum[16] == 1);
      assign V = (op1[15] == op2[15] && result[15] != op1[15]);
    endmodule
    
    module Store(
  input [15:0] op1,
  input [15:0] op2,
  output reg [9:0] address,
  input [15:0] write_data,
  input clk
);
  always @(negedge clk) begin
    if (op1 != 0) address <= op2[9:0];
    else address <= 0;
  end
endmodule

module Load(
  input [15:0] op1,
  input [15:0] op2,
  output reg [9:0] address,
  input clk,
  output reg [15:0] read_data,
  output reg Z
);
  always @(negedge clk) begin
    if (op1 != 0) address <= op2[9:0];
    else address <= 0;
    
    if (address >= 0 && address <= 1023)
      read_data <= op1;
    else
      read_data <= 0;
      
    Z <= (read_data == 0);
  end
endmodule


module Logical_AND(op1,op2,result,Z);
  input [15:0] op1;
  input [15:0] op2;
  output [15:0] result;
  output wire Z;
  assign result = op1 & op2;
  assign Z = op1 && op2;

endmodule



module Logical_OR(op1,op2,result,Z);
  input [15:0] op1;
  input [15:0] op2;
  output [15:0] result;
  output wire Z;
  assign result = op1 | op2;
  assign Z = op1  || op2 ;
endmodule

module AND_Bitwise(op1,op2,result,Z);
input [15:0] op1,op2;
output [15:0] result;
output wire Z;
and (result[0],op2[0],op1[0]);
and (result[1],op2[1],op1[1]);
and (result[2],op2[2],op1[2]);
and (result[3],op2[3],op1[3]);
and (result[4],op2[4],op1[4]);
and (result[5],op2[5],op1[5]);
and (result[6],op2[6],op1[6]);
and (result[7],op2[7],op1[7]);
and (result[8],op2[8],op1[8]);
and (result[9],op2[9],op1[9]);
and (result[10],op2[10],op1[10]);
and (result[11],op2[11],op1[11]);
and (result[12],op2[12],op1[12]);
and (result[13],op2[13],op1[13]);
and (result[14],op2[14],op1[14]);
and (result[15],op2[15],op1[15]);
assign Z = (op1 != 0) && (op2 != 0);
endmodule

module Set_on_Less_Than(op1,op2,op2_set,Z);
  input [15:0] op1;
  input [15:0] op2;
  output wire[15:0] op2_set;
  output wire Z;

  assign op2_set = (op1 < op2);
  assign Z = (op2_set == 0);
endmodule

module OR_Bitwise(op1,op2,result,Z);
input [15:0] op1,op2;
output [15:0] result;
output wire Z;
or (result[0],op2[0],op1[0]);
or (result[1],op2[1],op1[1]);
or (result[2],op2[2],op1[2]);
or (result[3],op2[3],op1[3]);
or (result[4],op2[4],op1[4]);
or (result[5],op2[5],op1[5]);
or (result[6],op2[6],op1[6]);
or (result[7],op2[7],op1[7]);
or (result[8],op2[8],op1[8]);
or (result[9],op2[9],op1[9]);
or (result[10],op2[10],op1[10]);
or (result[11],op2[11],op1[11]);
or (result[12],op2[12],op1[12]);
or (result[13],op2[13],op1[13]);
or (result[14],op2[14],op1[14]);
or (result[15],op2[15],op1[15]);
assign Z = (op1 != 0) || (op2 != 0);
endmodule




module XNOR_Bitwise(op1,op2,result);
input [15:0] op1,op2;
output [15:0] result;
output wire Z;
xnor (result[0],op2[0],op1[0]);
xnor (result[1],op2[1],op1[1]);
xnor (result[2],op2[2],op1[2]);
xnor (result[3],op2[3],op1[3]);
xnor (result[4],op2[4],op1[4]);
xnor (result[5],op2[5],op1[5]);
xnor (result[6],op2[6],op1[6]);
xnor (result[7],op2[7],op1[7]);
xnor (result[8],op2[8],op1[8]);
xnor (result[9],op2[9],op1[9]);
xnor (result[10],op2[10],op1[10]);
xnor (result[11],op2[11],op1[11]);
xnor (result[12],op2[12],op1[12]);
xnor (result[13],op2[13],op1[13]);
xnor (result[14],op2[14],op1[14]);
xnor (result[15],op2[15],op1[15]);
assign Z= (op1 ~^ op2) ;
endmodule

module Circular_Shift_Right(op1,result);
input [15:0] op1;
output [15:0] result;
wire w1,w2,w3,w4,w5,w6,w7,w8,w9,w10,w11,w12,w13,w14,w15,w16;

not(w1,op1[1]);
not(w2,op1[2]);
not(w3,op1[3]);
not(w4,op1[4]);
not(w5,op1[5]);
not(w6,op1[6]);
not(w7,op1[7]);
not(w8,op1[8]);
not(w9,op1[9]);
not(w10,op1[10]);
not(w11,op1[11]);
not(w12,op1[12]);
not(w13,op1[13]);
not(w14,op1[14]);
not(w15,op1[15]);
not(w16,op1[0]);

not(result[0],w1);
not(result[1],w2);
not(result[2],w3);
not(result[3],w4);
not(result[4],w5);
not(result[5],w6);
not(result[6],w7);
not(result[7],w8);
not(result[8],w9);
not(result[9],w10);
not(result[10],w11);
not(result[11],w12);
not(result[12],w13);
not(result[13],w14);
not(result[14],w15);
not(result[15],w16);
endmodule

module Shift_Left(op1,result);
input [15:0] op1;
output [15:0] result;

wire w1,w2,w3,w4,w5,w6,w7,w8,w9,w10,w11,w12,w13,w14,w15,w16;

not(w1,op1[1]);
not(w2,op1[2]);
not(w3,op1[3]);
not(w4,op1[4]);
not(w5,op1[5]);
not(w6,op1[6]);
not(w7,op1[7]);
not(w8,op1[8]);
not(w9,op1[9]);
not(w10,op1[10]);
not(w11,op1[11]);
not(w12,op1[12]);
not(w13,op1[13]);
not(w14,op1[14]);
not(w15,op1[15]);
not(w16,op1[0]);

not(result[0],w15);
not(result[1],w16);
not(result[2],w1);
not(result[3],w2);
not(result[4],w3);
not(result[5],w4);
not(result[6],w5);
not(result[7],w6);
not(result[8],w7);
not(result[9],w8);
not(result[10],w9);
not(result[11],w10);
not(result[12],w11);
not(result[13],w12);
not(result[14],w13);
not(result[15],w14);
endmodule


module test;
reg [15:0]Reg0,Reg1,Reg2,Reg3,Reg4,Reg5,Reg6,Reg7;
reg [3:0]op;
reg clk;
reg [2:0]op1_sel,op2_sel;
inout [15:0]op1,op2;
wire [15:0] result;
wire [2:0] status;
wire [9:0]address;
wire [15:0]read_data;
input [15:0]write_data;
cpu c(Reg0,Reg1,Reg2,Reg3,Reg4,Reg5,Reg6,Reg7,op,op1_sel,op2_sel,op1,op2,clk,result,status,address,write_data,read_data);
initial 
begin

$display("Increment Op1:");
Reg0 = 16'B0000000000100111; Reg1 = 16'B0000000010000010 ; Reg2 = 16'B0000000010000000 ; Reg3 = 16'B0000000000100110; Reg4 = 16'B0000000010110000; Reg5=16'B0000000000101000; Reg6= 16'B0000000010001110; Reg7=16'B0000000010000001; 
op = 4'b0000;
op1_sel = 3'b001 ; op2_sel = 3'B000;
    #1 $display("Result= %b, Z= %b, V= %b, C= %b", result, status[1], status[0], status[2]);

    
    
$display("Decrement Op1:");
Reg0 = 16'B0000000000000001 ; Reg1 = 16'B0000000000000001 ; Reg2 = 16'B0000000011111111 ; Reg3 = 16'B0000000000001011; Reg4=16'B0000000010000010; Reg5=16'B0000000010110000;Reg6=16'B0000000010110101;Reg7=16'B0000100010010000;
op = 4'b0001;
op1_sel = 3'B000 ; op2_sel = 3'B010;
    #1 $display("Result= %b, Z= %b, V= %b, C= %b", result, status[1], status[0], status[2]);


$display("Subtraction:");
Reg0 = 16'B0000000000001111 ; Reg1 = 16'B0000000000001101 ; Reg2 =16'B0000000011001111 ; Reg3 = 16'B0000000011111111; Reg4 = 16'B0000100100001011 ; Reg5 = 16'B0010000100000001 ; Reg6 =16'B0110100011001001 ; Reg7 = 16'B1001000011010110;
op = 4'b0010;
op1_sel = 3'b011 ; op2_sel = 3'B110;
    #1 $display("Result= %b, Z= %b, V= %b, C= %b", result, status[1], status[0], status[2]);


$display("Addition:");
Reg0 = 16'B0000000000001010 ; Reg1 = 16'B0000000000000101 ; Reg2 =16'B0011000011001111 ; Reg3 = 16'B0000000011001111; Reg4 = 16'B0000100100000011 ; Reg5 = 16'B0011010100000001 ; Reg6 =16'B0110100011011000 ; Reg7 = 16'B1111000011010000;
op = 4'b0011;
op1_sel = 3'b001 ; op2_sel = 3'B110;
   #1 $display("Result= %b, Z= %b, V= %b, C= %b", result, status[1], status[0], status[2]);



$display("Set on Less Than:");
Reg0 = 16'B0000000000101010 ; Reg1 = 16'B0000000010010001 ; Reg2 = 16'B0000000000000011 ; Reg3 = 16'B0000000000001011; Reg4 = 16'B0000100100001011 ; Reg5 = 16'B0010000100000001 ; Reg6 =16'B0110100011001001 ; Reg7 = 16'B0000000011010110;

op = 4'b0100;
op1_sel = 3'b000 ; op2_sel = 3'B111;
    #1 $display("Result= %b, Z= %b", result, status[1]);



$display("Store:");
Reg0 = 16'B1000000000010101 ; Reg1 = 16'B0000000000010001 ; Reg2 = 16'B1000000001111111 ; Reg3 = 16'B0000000000000011; Reg4 = 16'B0000101100001011 ; Reg5 = 16'B0010000100011001 ; Reg6 =16'B0110100011001101 ; Reg7 = 16'B0000011011010110;
op = 4'b0101;
op1_sel = 3'b011 ; op2_sel = 3'B010;
#1 $display("Result= %b",result);

$display("Load:");
Reg0 = 16'B0000000000011111 ; Reg1 = 16'B1000000000010001 ; Reg2 = 16'B0000000000001011 ; Reg3 = 16'B1000000100010001; Reg4 = 16'B0000100101001011 ; Reg5 = 16'B0010000000000001 ; Reg6 =16'B0110100010001001 ; Reg7 = 16'B0000100011010110;
op = 4'b0110;
op1_sel = 3'b001 ; op2_sel = 3'B100;
    #1 $display("Result= %b, Z= %b", result, status[1]);



$display("Logical AND:");
Reg0 = 16'B1100000000010011 ; Reg1 = 16'B0000000000000001 ; Reg2 = 16'B0000000011111111 ; Reg3 = 16'B0000000000001011; Reg4 = 16'B0000001100000011 ; Reg5 = 16'B0000000100000001 ; Reg6 =16'B0010100011001001 ; Reg7 = 16'B0000000000010110;
op = 4'b0111;
op1_sel = 3'b001 ; op2_sel = 3'B111;
#1 $display("Result= %b, Z= %b", result, status[1]);

$display("Logical OR:");
Reg0 = 16'B1000000000111101 ; Reg1 = 16'B0000000000001001 ; Reg2 = 16'B0000000011111111 ; Reg3 = 16'B0000000010010001; Reg4 = 16'B0000001100001001 ; Reg5 = 16'B0000000000000001 ; Reg6 =16'B0110100011001000 ; Reg7 = 16'B0000000000010110;
op = 4'b1000;
op1_sel = 3'b000 ; op2_sel = 3'B100;
#1 $display("Result= %b, Z= %b", result, status[0]);


$display("AND--Bitwise Operation Result:");
Reg0 = 16'B1000000000001111 ; Reg1 = 16'B0000000001010001 ; Reg2 = 16'B1000000001010001 ; Reg3 = 16'B1000000001010000; Reg4 = 16'B0000100000001011 ; Reg5 = 16'B0000000100000001 ; Reg6 =16'B0110100010001001 ; Reg7 = 16'B0000000000010110;
op = 4'b1001;
op1_sel = 3'b111 ; op2_sel = 3'B001;
#1 $display("Result= %b, Z= %b", result, status[1]);

$display("OR--Bitwise Operation Result:");
Reg0 = 16'B1000000000110001 ; Reg1 = 16'B0000000000001011 ; Reg2 = 16'B1000000001111111 ; Reg3 = 16'B1000000000010001; Reg4 = 16'B0000000100000000 ; Reg5 = 16'B0000000100000001 ; Reg6 =16'B0000100011001001 ; Reg7 = 16'B0000000011011110;
op = 4'b1010;
op1_sel = 3'b011 ; op2_sel = 3'B100;
#1 $display("Result= %b, Z= %b", result, status[1]);

$display("XNOR--Bitwise Operation Result:");
Reg0 = 16'B0000000010110001 ; Reg1 = 16'B0000000010010001 ; Reg2 = 16'B0000000011111111 ; Reg3 = 16'B0000000010010001; Reg4 = 16'B0000100100001011 ; Reg5 = 16'B0010000100000001 ; Reg6 =16'B0110100011011001 ; Reg7 = 16'B0000000011010111;
op = 4'b1011;
op1_sel = 3'b101 ; op2_sel = 3'B111;
#1 $display("Result= %b, Z= %b", result, status[1]);

$display("Circular Shift Right Result:");
Reg0 = 16'B0000000001010101 ; Reg1 = 16'B0000000011010001 ; Reg2 = 16'B0000000011111111 ; Reg3 = 16'B0000000010010001; Reg4 = 16'B0000100101001011 ; Reg5 = 16'B0010000100111001 ; Reg6 =16'B0110101111001001 ; Reg7 = 16'B0000000011110110;
op = 4'b1100;
op1_sel = 3'b011 ; op2_sel = 3'B000;
#1 $display("Result= %b",result);

$display("Circular Shift Left Result:");
Reg1 = 16'B0000000000111001 ; Reg2 = 16'B0000000000110001 ; Reg3 = 16'B0000000011111111 ; Reg4 = 16'B0000000010010001; Reg5 = 16'B0000000000111001 ; Reg6 = 16'B0000000000110001 ; Reg7 = 16'B0000000011111111 ; 

op = 4'b1101;
op1_sel = 3'B011 ; op2_sel = 3'B000; 
#1 $display("Result= %b",result);
end
endmodule


